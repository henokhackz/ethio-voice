generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid()) @map("_id")
  clerkId     String     @unique
  email       String     @unique
  firstName   String?
  lastName    String?
  username    String     @unique
  photo       String?
  phoneNumber String?
  address     String?
  role        String     @default("user")
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]

  feedbacks Feedback[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

model Feedback {
  id          String     @id @default(cuid()) @map("_id")
  name        String?
  phoneNumber String?
  title       String
  feedback    String
  category    String
  state       String     @default("PENDING")
  attachment  String?
  user        User       @relation(fields: [userId], references: [id])
  isPublic    Boolean    @default(true)
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  userId      String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Category {
  id        String     @id @default(cuid()) @map("_id")
  name      String     @unique
  feedbacks Feedback[]
}

model Notification {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  feedbackId String?
  user       User     @relation(fields: [userId], references: [id])
  message    String
  type       String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Upvote {
  id         String   @id @default(cuid()) @map("_id")
  feedbackId String
  userId     String
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Downvote {
  id         String   @id @default(cuid()) @map("_id")
  feedbackId String
  userId     String
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Comment {
  id         String   @id @default(cuid()) @map("_id")
  content    String
  feedbackId String
  userId     String
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}
